import React, { useEffect, useMemo, useState } from "react";
import { motion } from "framer-motion";
import {
  Brain,
  Bell,
  Calendar,
  Clock,
  Heart,
  Key,
  Newspaper,
  MessageCircle,
  ShieldCheck,
  Sparkles,
  Mic,
  Lock,
  Settings
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Slider } from "@/components/ui/slider";
import { Textarea } from "@/components/ui/textarea";

/**
 * Maqueta interactiva (una sola página) – Asistente proactivo para +60
 * -------------------------------------------------------------------
 * Objetivo: mostrar, en un prototipo navegable, el concepto que trabajaste:
 *   – Prevención cognitiva con tecnología sutil (no intrusiva)
 *   – Semana de adaptación (observación + ajuste)
 *   – Reconocimiento de patrones (rutinas e intereses)
 *   – Proactividad (la IA PREGUNTA primero)
 *   – Controles de privacidad simples y visibles
 *   – Micro‑actividades cognitivas de 1–2 minutos
 *   – Ayudas cotidianas: recordatorios, dónde dejé X, resúmenes breves
 *
 * NOTA: Es un prototipo FRONTEND. No llama a APIs reales ni guarda en servidor.
 */

// ----- Datos de ejemplo -----
const seedInterests = [
  { id: "econ", label: "Economía argentina" },
  { id: "mus", label: "Música" },
  { id: "lect", label: "Lectura" },
  { id: "idi", label: "Idiomas" },
  { id: "salud", label: "Salud" },
];

const seedRoutines = [
  { id: 1, time: "08:00", label: "Tomar medicación" },
  { id: 2, time: "10:30", label: "Caminata corta" },
  { id: 3, time: "13:00", label: "Almuerzo" },
  { id: 4, time: "16:00", label: "Lectura / mates" },
  { id: 5, time: "20:30", label: "Música y relajación" },
];

// ----- Utilidades de tiempo -----
function timeToMinutes(t) {
  const [h, m] = t.split(":").map(Number);
  return h * 60 + m;
}
function minutesNow() {
  const d = new Date();
  return d.getHours() * 60 + d.getMinutes();
}
function withinWindow(target, minutes = 30) {
  const now = minutesNow();
  const t = timeToMinutes(target);
  return Math.abs(now - t) <= minutes;
}

// ----- UI pequeñas -----
function SectionTitle({ icon: Icon, children, subtitle }) {
  return (
    <div className="flex items-center gap-3 mb-3">
      {Icon && <Icon className="w-5 h-5" />}
      <div>
        <h3 className="text-lg font-semibold leading-none">{children}</h3>
        {subtitle && <p className="text-xs text-muted-foreground mt-1">{subtitle}</p>}
      </div>
    </div>
  );
}
function Tag({ active, onClick, children }) {
  return (
    <button
      onClick={onClick}
      className={`px-3 py-1 rounded-full text-sm border transition ${
        active ? "bg-primary text-primary-foreground border-primary" : "hover:bg-accent"
      }`}
    >
      {children}
    </button>
  );
}
function ProactiveSuggestion({ title, body, onAccept, onDismiss }) {
  return (
    <Card className="border-dashed">
      <CardHeader className="py-3">
        <CardTitle className="text-base flex items-center gap-2">
          <Sparkles className="w-4 h-4" />
          {title}
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-0 text-sm">
        <p className="mb-3">{body}</p>
        <div className="flex gap-2">
          <Button size="sm" onClick={onAccept}>Aceptar</Button>
          <Button variant="secondary" size="sm" onClick={onDismiss}>Ahora no</Button>
        </div>
      </CardContent>
    </Card>
  );
}

// ----- Mini‑actividad cognitiva (lista corta) -----
function MicroActividad() {
  const pools = {
    compras: ["Leche", "Pan", "Manzana", "Arroz", "Café", "Queso", "Huevos", "Yerba"],
    nombres: ["Marta", "Luis", "Ana", "Jorge", "Clara", "Héctor", "Sofía", "Pedro"],
  };
  const [mode, setMode] = useState("compras");
  const [items, setItems] = useState([]);
  const [hidden, setHidden] = useState(false);
  const [respuesta, setRespuesta] = useState("");
  const [feedback, setFeedback] = useState("");

  const generar = () => {
    const pool = pools[mode];
    const sel = [...pool].sort(() => Math.random() - 0.5).slice(0, 5);
    setItems(sel);
    setHidden(false);
    setRespuesta("");
    setFeedback("");
  };
  useEffect(() => {
    generar();
    // eslint-disable-next-line
  }, [mode]);

  const evaluar = () => {
    const esperados = new Set(items.map((x) => x.toLowerCase()));
    const dichos = respuesta
      .split(/[,\n]/)
      .map((s) => s.trim().toLowerCase())
      .filter(Boolean);
    let aciertos = 0;
    dichos.forEach((d) => {
      if (esperados.has(d)) aciertos += 1;
    });
    setFeedback(`Recordaste ${aciertos}/5. Practicar 1–2 min por día ayuda a mantener la memoria.`);
  };

  return (
    <Card>
      <CardHeader className="py-3">
        <CardTitle className="text-base flex items-center gap-2">
          <Brain className="w-4 h-4" /> Mini‑actividad (1–2 min)
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-0 text-sm space-y-3">
        <div className="flex gap-2 text-xs">
          <Tag active={mode === "compras"} onClick={() => setMode("compras")}>Lista de compras</Tag>
          <Tag active={mode === "nombres"} onClick={() => setMode("nombres")}>Nombres</Tag>
        </div>
        <div className="p-3 rounded-md bg-accent/40">
          {!hidden ? (
            <>
              <p className="mb-2">Memorizá estos 5 ítems (10 seg) y tocá "Ocultar".</p>
              <div className="flex flex-wrap gap-2">
                {items.map((x) => (
                  <span key={x} className="px-2 py-1 rounded bg-background border text-sm">{x}</span>
                ))}
              </div>
            </>
          ) : (
            <p className="text-muted-foreground">Ahora escribí lo que recuerdes, separado por comas.</p>
          )}
        </div>
        <div className="flex gap-2">
          <Button size="sm" onClick={() => setHidden(true)}>Ocultar</Button>
          <Button variant="secondary" size="sm" onClick={generar}>Nueva lista</Button>
        </div>
        <Input placeholder="Ej: Pan, Queso, …" value={respuesta} onChange={(e) => setRespuesta(e.target.value)} />
        <div className="flex gap-2">
          <Button size="sm" onClick={evaluar}>Evaluar</Button>
          {feedback && <p className="text-xs text-muted-foreground self-center">{feedback}</p>}
        </div>
      </CardContent>
    </Card>
  );
}

// ----- Componente principal -----
export default function App() {
  const [name, setName] = useState("Jossi");
  const [age, setAge] = useState(65);
  const [adaptWeek, setAdaptWeek] = useState(60); // % semana de adaptación
  const [interests, setInterests] = useState(["econ", "mus", "lect"]);
  const [routines, setRoutines] = useState(seedRoutines);
  const [proactive, setProactive] = useState(true);
  const [freq, setFreq] = useState([60]); // segundos en la maqueta (concepto: minutos)
  const [micPassive, setMicPassive] = useState(false);
  const [hotwords, setHotwords] = useState("Hola Asistente, Necesito ayuda");
  const [reminders, setReminders] = useState([
    { id: "m1", time: "08:00", text: "Tomar medicación" },
    { id: "m2", time: "16:00", text: "Leer 10 min" },
  ]);
  const [suggestions, setSuggestions] = useState([]);

  // Ayudas de objetos (mock manual)
  const [lastKeysPlace, setLastKeysPlace] = useState("Mesa del living");
  const [lastPhonePlace, setLastPhonePlace] = useState("Cocina");
  const [keysHint, setKeysHint] = useState("");
  const [phoneHint, setPhoneHint] = useState("");

  const toggleInterest = (id) => {
    setInterests((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));
  };

  const addReminder = (text) => {
    const time = new Date();
    const hh = String(time.getHours()).padStart(2, "0");
    const mm = String(time.getMinutes()).padStart(2, "0");
    setReminders((r) => [{ id: Math.random().toString(36).slice(2), time: `${hh}:${mm}`, text }, ...r]);
  };

  // Generador de sugerencias proactivas según hora/intereses/rutinas
  const makeSuggestions = () => {
    const nowMin = minutesNow();
    const nearRoutine = routines.find((r) => withinWindow(r.time, 20));
    const interest = interests[Math.floor(Math.random() * interests.length)];
    const interestLabel = seedInterests.find((i) => i.id === interest)?.label || "";

    const base = [];
    if (nearRoutine) {
      base.push({
        title: `Se acerca tu rutina: ${nearRoutine.label}`,
        body: `Son las ${new Date().toLocaleTimeString([], {hour: "2-digit", minute: "2-digit"})}. ¿Querés que te acompañe con un recordatorio suave y un tip para no olvidarlo mañana?`,
      });
    }
    if (nowMin < 720) {
      base.push({ title: "Arranque suave (2 minutos)", body: "Te propongo una mini‑actividad de memoria y luego un titular breve de tu interés." });
    } else if (nowMin < 1080) {
      base.push({ title: "Tu interés del día", body: `Tengo una nota de 1 min sobre ${interestLabel}. ¿Te la leo ahora?` });
    } else {
      base.push({ title: "Cierre del día", body: "¿Te recuerdo dónde dejaste las llaves y el celular? También puedo guardar un apunte rápido." });
    }
    setSuggestions(base);
  };

  useEffect(() => { makeSuggestions(); }, []);

  // Temporizador de proactividad
  const proactiveTick = useMemo(() => {
    return setInterval(() => {
      if (!proactive) return;
      makeSuggestions();
    }, Math.max(15, freq[0]) * 1000);
  }, [proactive, freq]);
  useEffect(() => () => clearInterval(proactiveTick), [proactiveTick]);

  return (
    <div className="min-h-screen w-full bg-gradient-to-b from-rose-50 to-white text-zinc-900">
      <div className="max-w-6xl mx-auto p-6">
        {/* Header */}
        <header className="flex items-start justify-between mb-6">
          <div>
            <h1 className="text-2xl font-bold tracking-tight flex items-center gap-3">
              <Sparkles className="w-6 h-6" /> Asistente proactivo – Maqueta
            </h1>
            <p className="text-sm text-muted-foreground mt-1">
              Prevención cognitiva + autonomía. Tecnología sutil, no invasiva, que <b>pregunta</b> y <b>guía</b>.
            </p>
          </div>
          <div className="flex items-center gap-3">
            <ShieldCheck className="w-5 h-5" />
            <span className="text-xs text-muted-foreground">Privacidad por diseño</span>
          </div>
        </header>

        {/* GRID PRINCIPAL */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Columna 1: Perfil */}
          <Card className="md:col-span-1">
            <CardHeader className="pb-2">
              <CardTitle className="text-base">Perfil del usuario</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-sm">
              <div className="grid grid-cols-2 gap-2">
                <div>
                  <label className="text-xs">Nombre</label>
                  <Input value={name} onChange={(e) => setName(e.target.value)} />
                </div>
                <div>
                  <label className="text-xs">Edad</label>
                  <Input type="number" value={age} onChange={(e) => setAge(parseInt(e.target.value || "0"))} />
                </div>
              </div>

              <div>
                <SectionTitle icon={Heart}>Intereses</SectionTitle>
                <div className="flex flex-wrap gap-2">
                  {seedInterests.map((i) => (
                    <Tag key={i.id} active={interests.includes(i.id)} onClick={() => toggleInterest(i.id)}>
                      {i.label}
                    </Tag>
                  ))}
                </div>
              </div>

              <div>
                <SectionTitle icon={Calendar} subtitle="La primera semana la IA observa, sugiere y ajusta">
                  Semana de adaptación
                </SectionTitle>
                <div className="flex items-center gap-3">
                  <Slider value={[adaptWeek]} onValueChange={(v) => setAdaptWeek(v)} max={100} step={5} className="w-full" />
                  <span className="text-xs w-12 text-right">{adaptWeek}%</span>
                </div>
              </div>

              <div>
                <SectionTitle icon={Bell}>Recordatorios rápidos</SectionTitle>
                <div className="flex gap-2">
                  <Button size="sm" onClick={() => addReminder("Tomar agua")}>+ Agua</Button>
                  <Button size="sm" variant="secondary" onClick={() => addReminder("Mover 5 min")}>+ Mover</Button>
                </div>
                <ul className="mt-2 space-y-1">
                  {reminders.map((r) => (
                    <li key={r.id} className="text-xs flex items-center gap-2">
                      <Clock className="w-3 h-3" /> {r.time} – {r.text}
                    </li>
                  ))}
                </ul>
              </div>

              <div>
                <SectionTitle icon={Lock}>Privacidad</SectionTitle>
                <div className="space-y-2 text-xs">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2"><Mic className="w-3 h-3"/> Activación por palabras clave</div>
                    <Switch checked={micPassive} onCheckedChange={setMicPassive} />
                  </div>
                  <Input value={hotwords} onChange={(e) => setHotwords(e.target.value)} />
                  <p className="text-muted-foreground">Solo escucha tras oír la frase. Nada se guarda si no hay activación.</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Columna 2–3: Interacciones y contenido */}
          <div className="md:col-span-2 space-y-4">
            {/* Asistente Proactivo */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base flex items-center gap-2">
                  <MessageCircle className="w-4 h-4" /> Asistente proactivo
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3 text-sm">
                    <Switch checked={proactive} onCheckedChange={setProactive} />
                    <span>{proactive ? "Proactividad activada" : "Proactividad desactivada"}</span>
                  </div>
                  <div className="flex items-center gap-3 text-xs">
                    <span>Frecuencia</span>
                    <div className="flex items-center gap-2 w-48">
                      <Slider value={freq} onValueChange={setFreq} min={30} max={180} step={15} />
                      <span className="w-10 text-right">{freq[0]}"</span>
                    </div>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-3">
                  {suggestions.map((s, idx) => (
                    <ProactiveSuggestion
                      key={idx}
                      title={s.title}
                      body={s.body}
                      onAccept={() => addReminder(s.title)}
                      onDismiss={() => setSuggestions((prev) => prev.filter((_, i) => i !== idx))}
                    />
                  ))}
                </div>

                <div className="flex gap-2">
                  <Button onClick={makeSuggestions} size="sm">
                    <Sparkles className="w-4 h-4 mr-1" /> Proponer ahora
                  </Button>
                  <Button variant="secondary" size="sm" onClick={() => addReminder("Apunte rápido del día")}>Apunte del día</Button>
                </div>
              </CardContent>
            </Card>

            {/* Rutinas */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base flex items-center gap-2">
                  <Calendar className="w-4 h-4" /> Rutinas reconocidas
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-3 text-sm">
                  {routines.map((r) => (
                    <div key={r.id} className={`p-3 rounded border ${withinWindow(r.time, 20) ? "bg-emerald-50 border-emerald-200" : "bg-card"}`}>
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4" />
                        <strong>{r.time}</strong> – {r.label}
                      </div>
                      <div className="text-xs text-muted-foreground mt-1">
                        {withinWindow(r.time, 20) ? "En tu ventana de tiempo" : "Aprendido durante adaptación"}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Mini-actividad */}
            <MicroActividad />

            {/* Objetos cotidianos (mock) */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base flex items-center gap-2">
                  <Key className="w-4 h-4" /> ¿Dónde dejé…?
                </CardTitle>
              </CardHeader>
              <CardContent className="text-sm space-y-3">
                <div className="grid md:grid-cols-2 gap-3">
                  <div className="p-3 rounded border bg-card">
                    <div className="text-xs text-muted-foreground mb-1">Llaves</div>
                    <div className="flex items-center gap-2">
                      <Input value={lastKeysPlace} onChange={(e) => setLastKeysPlace(e.target.value)} />
                      <Button size="sm" onClick={() => setKeysHint(`Última vez: ${lastKeysPlace}`)}>Recordar</Button>
                    </div>
                    {keysHint && <p className="text-xs mt-2">{keysHint}</p>}
                  </div>
                  <div className="p-3 rounded border bg-card">
                    <div className="text-xs text-muted-foreground mb-1">Celular</div>
                    <div className="flex items-center gap-2">
                      <Input value={lastPhonePlace} onChange={(e) => setLastPhonePlace(e.target.value)} />
                      <Button size="sm" onClick={() => setPhoneHint(`Última vez: ${lastPhonePlace}`)}>Recordar</Button>
                    </div>
                    {phoneHint && <p className="text-xs mt-2">{phoneHint}</p>}
                  </div>
                </div>
                <p className="text-xs text-muted-foreground">En un MVP real, esto se conecta a etiquetas Bluetooth/Ultra‑Wideband y geocercas en casa.</p>
              </CardContent>
            </Card>

            {/* Resúmenes de interés (mock) */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base flex items-center gap-2">
                  <Newspaper className="w-4 h-4" /> Lecturas de 1 minuto
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2 text-sm">
                <p className="text-muted-foreground">Prototipo: al elegir un interés, aparece un resumen ficticio (no hay API).</p>
                {interests.includes("econ") && (
                  <div className="p-3 rounded border bg-card">Dólar y salarios: informe breve del BCRA resumido en 5 líneas para conversación de sobremesa.</div>
                )}
                {interests.includes("idi") && (
                  <div className="p-3 rounded border bg-card">Palabra del día (italiano): <b>andare</b> – "ir". Ej.: "Andiamo al mercato".</div>
                )}
                {interests.includes("mus") && (
                  <div className="p-3 rounded border bg-card">Sugerencia musical consciente: 2 temas de 3 min que traen recuerdos de juventud y conversación.</div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Footer */}
        <footer className="mt-8 text-xs text-muted-foreground">
          <div className="flex items-center gap-2">
            <Settings className="w-3 h-3" />
            Maqueta: sin backend. Diseñada para conversación académica y demo en panel A2.
          </div>
        </footer>
      </div>
    </div>
  );
}
